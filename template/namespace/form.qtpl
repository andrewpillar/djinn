{%
import (
	"github.com/andrewpillar/thrall/model"
	"github.com/andrewpillar/thrall/template"
)
%}

{% code
type Form struct {
	template.Page
	template.Form

	Parent    *model.Namespace
	Namespace *model.Namespace
}

func (p *Form) action() string {
	if p.Namespace == nil {
		return "/namespaces"
	}

	return p.Namespace.UIEndpoint()
}

func (p *Form) value(field string) string {
	old := p.Form.Get(field)

	if p.Namespace != nil {
		if old != "" {
			return old
		}

		switch field {
			case "name":
				return p.Namespace.Name
			case "description":
				return p.Namespace.Description
			default:
				return ""
		}
	}

	return old
}

func (p *Form) checked(vis model.Visibility) string {
	if p.Namespace != nil {
		if p.Namespace.Visibility == vis {
			return `checked="true"`
		}

		return ``
	}

	if p.Parent != nil {
		if p.Parent.Visibility == vis {
			return `checked="true"`
		}
	}

	if vis == model.Private {
		return `checked="true"`
	}

	return ``
}

func (p *Form) disabled(vis model.Visibility) string {
	if p.Namespace != nil {
		if p.Namespace.ParentID.Valid && p.Namespace.Visibility != vis {
			return "disabled"
		}

		return ""
	}

	if p.Parent != nil {
		if p.Parent.Visibility != vis {
			return "disabled"
		}
	}

	return ""
}
%}

{% collapsespace %}

{% func (p *Form) Body() %}
	<div class="panel">
		<div class="panel-body slim">
			<form method="POST" action="{%s p.action() %}">
				{%s= string(p.CSRF) %}
				{% if p.Namespace != nil %}
					<input type="hidden" name="_method" value="PATCH"/>
				{% endif %}
				{% if p.Parent != nil && !p.Parent.IsZero() %}
					<input type="hidden" name="parent" value="{%s p.Parent.Path %}"/>
				{% endif %}
				{%= p.Error("namespace") %}
				<div class="form-field">
					<label class="label" for="name">Name</label>
					<input class="form-text" type="text" name="name" value="{%s p.value("name") %}" autocomplete="off"/>
					{%= p.Error("name") %}
				</div>
				<div class="form-field">
					<label class="label" for="name">Description</label>
					<input class="form-text" type="text" name="description" value="{%s p.value("description") %}" autocomplete="off"/>
					{%= p.Error("description") %}
				</div>
				<div class="form-field">
					<label class="form-option {%s p.disabled(model.Private) %}">
						<input class="form-selector" type="radio" name="visibility" value="private" {%s p.checked(model.Private) %} {%s p.disabled(model.Private) %}/>
						<strong>Private</strong>
						{% cat "../../svgs/lock.svg" %}
						<div class="form-desc">You choose who can view builds in the namespace.</div>
					</label>
					<label class="form-option {%s p.disabled(model.Internal) %}">
						<input class="form-selector" type="radio" name="visibility" value="internal" {%s p.checked(model.Internal) %} {%s p.disabled(model.Internal) %}/>
						<strong>Internal</strong>
						{% cat "../../svgs/security.svg" %}
						<div class="form-desc">Anyone with an account will be able to view builds in the namespace.</div>
					</label>
					<label class="form-option {%s p.disabled(model.Public) %}">
						<input class="form-selector" type="radio" name="visibility" value="public" {%s p.checked(model.Public) %} {%s p.disabled(model.Public) %}/>
						<strong>Public</strong>
						{% cat "../../svgs/public.svg" %}
						<div class="form-desc">Anyone will be able to view builds in the namespace.</div>
					</label>
				</div>
				<div class="form-field">
					{% if p.Namespace != nil %}
						<button type="submit" class="btn btn-primary">Save</button>
					{% else %}
						<button type="submit" class="btn btn-primary">Create</button>
					{% endif %}
				</div>
			</form>
			{% if p.Namespace != nil %}
				<div class="separator"></div>
				<form method="POST" action="{%s p.Namespace.UIEndpoint() %}">
					{%s= string(p.CSRF) %}
					<input type="hidden" name="_method" value="DELETE"/>
					<div class="overflow">
						<div class="right">
							<button type="submit" class="btn btn-danger">Delete</button>
						</div>
						<strong>Delete Namespace</strong><br/><p>Builds within the namespace will not be deleted.</p>
					</div>
				</form>
			{% endif %}
		</div>
	</div>
{% endfunc %}

{% func (p *Form) Header() %}
	{% if p.Namespace != nil %}
		<a class="back" href="/u/{%s p.Namespace.User.Username %}/{%s p.Namespace.Path %}">{% cat "../../svgs/back.svg" %}</a>
		{%= renderPath(p.Namespace.User.Username, p.Namespace.Path) %} - Edit
	{% else %}
		{% if p.Parent != nil && !p.Parent.IsZero() %}
			<a class="back" href="{%s p.Parent.UIEndpoint() %}">{% cat "../../svgs/back.svg" %}</a>
			{%= renderPath(p.Parent.User.Username, p.Parent.Path) %} - Create Sub-namespace
		{% else %}
			<a class="back" href="/namespaces">{% cat "../../svgs/back.svg" %}</a> Create Namespace
		{% endif %}
	{% endif %}
{% endfunc %}

{% func (p *Form) Actions() %}{% endfunc %}
{% func (p *Form) Navigation() %}{% endfunc %}
{% endcollapsespace %}
