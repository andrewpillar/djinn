{%
import (
	"bytes"
	"encoding/json"
	"net/url"
	"regexp"
	"strconv"
	"html/template"

	"djinn-ci.com/database"
	"djinn-ci.com/user"

	"github.com/andrewpillar/webutil"
)
%}

{%
interface Page {
	Title()

	Body()

	Footer()
}
%}

{% code
type BasePage struct {
	URL  *url.URL
	User *user.User
}

type Form struct {
	CSRF   template.HTML
	Errors webutil.ValidationErrors
	Fields map[string]string
}

func pattern(name string) string { return "(^\\/" + name + "\\/?[a-z0-9\\/?]*$)" }

func LinkToQuery(url *url.URL, query map[string]string) string {
	q := url.Query()

	for k, v := range query {
		if v == "" {
			delete(q, k)
			continue
		}
		q.Set(k, v)
	}

	url2 := (*url)
	url2.RawQuery = q.Encode()

	return url2.String()
}

func Active(condition bool) string {
	if condition {
		return "active"
	}
	return ""
}

func Match(uri, pattern string) bool {
	matched, err := regexp.Match(pattern, []byte(uri))

	if err != nil {
		return false
	}
	return matched
}

func IndentJSON(s string) string {
	var buf bytes.Buffer

	json.Indent(&buf, []byte(s), "", "    ")
	return buf.String()
}

func pageURL(url *url.URL, page int64) string {
	q := url.Query()
	q.Set("page", strconv.FormatInt(page, 10))

	url.RawQuery = q.Encode()
	return url.String()
}
%}

{% collapsespace %}
{% func FileInput(f Form) %}
	<div class="form-field">
		<label class="label" for="file">File</label>
		<input type="file" id="file" name="file"/>
		{%= f.Error("file") %}
	</div>
{% endfunc %}

{% func Render(p Page) %}
	<!DOCTYPE HTML>
	<html lang="en">
		<head>
			<meta charset="utf-8">
			<meta content="width=device-width, initial-scale=1" name="viewport">
			<title>{%= p.Title() %}</title>
			<style type="text/css">{% cat "../static/main.css" %}</style>
		</head>
		<body>{%= p.Body() %}</body>
		<footer>{%= p.Footer() %}</footer>
	</html>
{% endfunc %}

{% stripspace %}
{% func RenderPaginator(url *url.URL, p database.Paginator) %}
	{% if len(p.Pages) > 1 %}
		<ul class="paginator panel">
			{% if p.Page == p.Prev %}
				<li><a class="disabled">Previous</a></li>
			{% else %}
				<li><a href="{%s pageURL(url, p.Prev) %}" class="prev">Previous</a></li>
			{% endif %}
			{% if p.Page == p.Next %}
				<li><a class="disabled">Next</a></li>
			{% else %}
				<li><a href="{%s pageURL(url, p.Next) %}" class="next">Next</a></li>
			{% endif %}
		</ul>
	{% endif %}
{% endfunc %}
{% endstripspace %}

{% func (f Form) Error(field string) %}
	<div class="form-error">
		{% if err := f.Errors.First(field); err != "" %}{%s err %}{% endif %}
	</div>
{% endfunc %}

{% func (p *BasePage) Title() %} Djinn CI {% endfunc %}
{% func (p *BasePage) Body() %}{% endfunc %}
{% func (p *BasePage) Footer() %}  {% endfunc %}
{% endcollapsespace %}
