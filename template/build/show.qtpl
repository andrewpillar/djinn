{%
import (
	"net/url"
	"time"

	"github.com/andrewpillar/thrall/model"
	"github.com/andrewpillar/thrall/model/types"
	"github.com/andrewpillar/thrall/runner"
	"github.com/andrewpillar/thrall/template"
	"github.com/andrewpillar/thrall/template/artifact"

	"github.com/hako/durafmt"
)
%}

{% code
type ShowPage struct {
	template.BasePage
	template.Section

	Build *model.Build
	CSRF  string
}

type ShowManifest struct {
	Build *model.Build
}

type ShowObjects struct {
	Build   *model.Build
	Objects []*model.BuildObject
}

type ShowArtifacts struct {
	URL       *url.URL
	Search    string
	Build     *model.Build
	Artifacts []*model.Artifact
}

type ShowVariables struct {
	Build     *model.Build
	Variables []*model.BuildVariable
}

type ShowKeys struct {
	Build *model.Build
	Keys  []*model.BuildKey
}

type ShowTags struct {
	CSRF  string
	Build *model.Build
	Tags  []*model.Tag
}
%}

{% collapsespace %}
{% func RenderTrigger(b *model.Build) %}
	{% code
		title := b.Trigger.CommentTitle()
		comment := b.Trigger.CommentBody()

		duration := time.Now().Sub(b.CreatedAt)
		parsedDur := durafmt.Parse(duration).LimitFirstN(2)
	%}
	<div class="panel">
		<div class="panel-body">
			{% if b.Trigger.Comment != "" %}
				<div class="comment-header mb-10">
					<div class="comment-title">
						{%= template.RenderShortStatus(b.Status) %}
						<strong>{%s title %}</strong>
					</div>
					<strong>{%s b.Trigger.Data["username"] %}</strong>
					{% switch b.Trigger.Type %}
					{% case types.Manual %}
						submitted
					{% case types.Push %}
						committed <a target="_blank" href="{%s b.Trigger.Data["url"] %}">{%s b.Trigger.Data["id"][:7] %}</a> to <span class="code">{%s b.Trigger.Data["ref"] %}</span>
					{% case types.Pull %}
						{%s b.Trigger.Data["action"] %} pull request <a target="_blank" href="{%s b.Trigger.Data["url"] %}">#{%s b.Trigger.Data["id"] %}</a> to <span class="code">{%s b.Trigger.Data["ref"] %}</span>
					{% endswitch %}
					{% if duration < (24 * time.Hour) %}
						- <span title="{%s b.CreatedAt.Format("Jan 02, 2006, at 15:04") %}">{%s parsedDur.String() %} </span> ago
					{% else %}
						- {%s b.CreatedAt.Format("Jan 02, 2006, at 15:04") %}
					{% endif %}
				</div>
				<pre>{%s comment %}</pre>
			{% else %}
				<em class="muted">No build comment.</em>
			{% endif %}
		</div>
		{% if len(b.Tags) > 0 %}
			<div class="panel-footer">
				{% for _, t := range b.Tags %}
					<a href="/?tag={%s t.Name %}" class="pill pill-light">{%s t.Name %}</a>
				{% endfor %}
			</div>
		{% endif %}
	</div>
{% endfunc %}

{% func (p *ShowPage) Title() %}
	{% if p.Section != nil %}
		{%= p.Section.Title() %}
	{% else %}
		Build #{%v p.Build.ID %} {%s p.Build.Trigger.CommentTitle() %} - Thrall
	{% endif %}
{% endfunc %}

{% func (p *ShowArtifacts) Title() %}
	Build #{%v p.Build.ID %} - Artifacts
{% endfunc %}

{% func (p *ShowKeys) Title() %}
	Build #{%v p.Build.ID %} - Keys
{% endfunc %}

{% func (p *ShowManifest) Title() %}
	Build #{%v p.Build.ID %} - Manifest
{% endfunc %}

{% func (p *ShowObjects) Title() %}
	Build #{%v p.Build.ID %} - Objects
{% endfunc %}

{% func (p *ShowTags) Title() %}
	Build #{%v p.Build.ID %} - Tags
{% endfunc %}

{% func (p *ShowVariables) Title() %}
	Build #{%v p.Build.ID %} - Variables
{% endfunc %}

{% func (p *ShowPage) Body() %}
	<div class="overflow">
		<div class="col-25 pr-5 left">
			<div class="panel">
				<table class="table">
					<tr>
						<td>Started at:</td>
						<td class="align-right">
							{% if p.Build.StartedAt.Valid %}
								{%s p.Build.StartedAt.Time.Format("2006-01-02T15:04:05") %}
							{% else %}
								<span class="muted">--</span>
							{% endif %}
						</td>
					</tr>
					<tr>
						<td>Finished at:</td>
						<td class="align-right">
							{% if p.Build.FinishedAt.Valid %}
								{%s p.Build.FinishedAt.Time.Format("2006-01-02T15:04:05") %}
							{% else %}
								<span class="muted">--</span>
							{% endif %}
						</td>
					</tr>
					<tr>
						<td>Duration:</td>
						<td class="align-right">
							{% if !p.Build.FinishedAt.Valid || !p.Build.StartedAt.Valid %}
								<span class="muted">--</span>
							{% else %}
								{%v p.Build.FinishedAt.Time.Sub(p.Build.StartedAt.Time) %}
							{% endif %}
						</td>
					</tr>
				</table>
			</div>
			{% for _, s := range p.Build.Stages %}
				<div class="panel">
					<div class="panel-header"><h3>{%s s.Name %}</h3></div>
					<table class="table">
						{% for _, j := range s.Jobs %}
							<tr>
								<td>{%= template.RenderShortStatus(j.Status) %} <a href="{%s j.UIEndpoint() %}">{%s j.Name %}</a></td>
								<td class="align-right">
									{% if !j.StartedAt.Valid || !j.FinishedAt.Valid %}
										<span class="muted">--</span>
									{% else %}
										{%v j.FinishedAt.Time.Sub(j.StartedAt.Time) %}
									{% endif %}
								</td>
							</tr>
						{% endfor %}
					</table>
				</div>
			{% endfor %}
		</div>
		<div class="col-75 pl-5 right">
			{%= RenderTrigger(p.Build) %}
			{% if p.Section != nil %}
				{%= p.Section.Section() %}
			{% else %}
				<div class="panel">
					{% if p.Build.Output.Valid %}
						<div class="panel-header">
							<ul class="panel-actions">
								<li>
									<a class="btn btn-primary" href="{%s p.Build.UIEndpoint("output", "raw") %}">
										{% cat "../../static/svg/document.svg" %}<span>Raw</span>
									</a>
								</li>
							</ul>
						</div>
						{%= template.RenderCode(p.Build.Output.String) %}
					{% else %}
						<div class="panel-message muted">No build output has been produced.</div>
					{% endif %}
				</div>
			{% endif %}
		</div>
	</div>
{% endfunc %}

{% func (p *ShowManifest) Section() %}
	<div class="panel">
		<div class="panel-header">
			<ul class="panel-actions">
				<li>
					<a class="btn btn-primary" href="{%s p.Build.UIEndpoint("manifest", "raw") %}">
						{% cat "../../static/svg/document.svg" %}<span>Raw</span>
					</a>
				</li>
			</ul>
		</div>
		{%= template.RenderCode(p.Build.Manifest.String()) %}
	</div>
{% endfunc %}

{% func (p *ShowObjects) Section() %}
	<div class="panel">
		{% if len(p.Objects) == 0 %}
			<div class="panel-message muted">No objects have been placed for this build.</div>
		{% else %}
			{%= RenderObjectTable(p.Objects) %}
		{% endif %}
	</div>
{% endfunc %}

{% func (p *ShowArtifacts) Section() %}
	<div class="panel">{%= artifact.RenderIndex(p.Artifacts, p.URL.Path, p.Search) %}</div>
{% endfunc %}

{% func (p *ShowVariables) Section() %}
	<div class="panel">
		{% if len(p.Variables) == 0 %}
			<div class="panel-message muted">No variables have been set for this build.</div>
		{% else %}
			{%= RenderVariableTable(p.Variables) %}
		{% endif %}
	</div>
{% endfunc %}

{% func (p *ShowKeys) Section() %}
	<div class="panel">
		{% if len(p.Keys) == 0 %}
			<div class="panel-message muted">No keys have been added to this build.</div>
		{% else %}
			{%= RenderKeyTable(p.Keys) %}
		{% endif %}
	</div>
{% endfunc %}

{% func (p *ShowTags) Section() %}
	<div class="panel">
		<div class="panel-header panel-body">
			<form method="POST" action="{%s p.Build.UIEndpoint("tags") %}">
				{%s= p.CSRF %}
				<div class="form-field form-field-inline">
					<input type="text" class="form-text" name="tags" placeholder="Tag this build..." autocomplete="off"/>
					<button type="submit" class="btn btn-primary">Tag</button>
				</div>
			</form>
		</div>
		{% if len(p.Tags) == 0 %}
			<div class="panel-message muted">No tags have been set for this build.</div>
		{% else %}
			{%= RenderTagTable(p.Tags, p.CSRF) %}
		{% endif %}
	</div>
{% endfunc %}

{% func (p *ShowPage) Header() %}
	<a href="/" class="back">{% cat "../../static/svg/back.svg" %}</a>
	{% if !p.Build.Namespace.IsZero() %}
		<a href="{%s p.Build.Namespace.UIEndpoint() %}">{%s p.Build.Namespace.Name %}</a> /
	{% endif %}
	Build #{%v p.Build.ID %}
{% endfunc %}

{% func (p *ShowPage) Actions() %}
	{% if p.User.ID == p.Build.UserID && p.Build.Status == runner.Running %}
	<li>
		<form method="POST" action="{%s p.Build.UIEndpoint() %}">
			{%s= string(p.CSRF) %}
			<input type="hidden" name="_method" value="DELETE">
			<button type="submit" class="btn btn-danger">Kill</button>
		</form>
	</li>
	{% endif %}
{% endfunc %}

{% stripspace %}
{% func (p *ShowPage) Navigation() %}
	<li>
		<a href="{%s p.Build.UIEndpoint() %}" class="{%s template.Active(p.Build.UIEndpoint() == p.URL.Path) %}">
			{% cat "../../static/svg/eye.svg" %}<span>Overview</span>
		</a>
	</li>
	<li>
		<a href="{%s p.Build.UIEndpoint("manifest") %}" class="{%s template.Active(p.Build.UIEndpoint("manifest") == p.URL.Path) %}">
			{% cat "../../static/svg/list.svg" %}<span>Manifest</span>
		</a>
	</li>
	<li>
		<a href="{%s p.Build.UIEndpoint("objects") %}" class="{%s template.Active(p.Build.UIEndpoint("objects") == p.URL.Path) %}">
			{% cat "../../static/svg/upload.svg" %}<span>Objects</span>
		</a>
	</li>
	<li>
		<a href="{%s p.Build.UIEndpoint("artifacts") %}" class="{%s template.Active(p.Build.UIEndpoint("artifacts") == p.URL.Path) %}">
			{% cat "../../static/svg/download.svg" %}<span>Artifacts</span>
		</a>
	</li>
	<li>
		<a href="{%s p.Build.UIEndpoint("variables") %}" class="{%s template.Active(p.Build.UIEndpoint("variables") == p.URL.Path) %}">
			{% cat "../../static/svg/code.svg" %}<span>Variables</span>
		</a>
	</li>
	<li>
		<a href="{%s p.Build.UIEndpoint("keys") %}" class="{%s template.Active(p.Build.UIEndpoint("keys") == p.URL.Path) %}">
			{% cat "../../static/svg/key.svg" %}<span>Keys</span>
		</a>
	</li>
	<li>
		<a href="{%s p.Build.UIEndpoint("tags") %}" class="{%s template.Active(p.Build.UIEndpoint("tags") == p.URL.Path) %}">
			{% cat "../../static/svg/tag.svg" %}<span>Tags</span>
		</a>
	</li>
{% endfunc %}
{% endstripspace %}
{% endcollapsespace %}
