

pidfile "/var/run/djinn/server.pid"

log info "/var/log/djinn/server.log"

# The host on which the server will be running, used for OAuth redirects and
# webhooks.
host "https://djinn-ci.com"

# List the drivers that you want to support on the Djinn CI server. Each driver
# will be submitted onto its own queue for processing. The queues used for
# processing will be in the format of "builds_driver", where driver is the name
# of the driver being used for that build, for example "builds_docker" or
# "builds_qemu-x86_64".
drivers [
	"docker",
	"qemu-x86_64",
]

# When set to true share_queue will place every build onto the same queue
# regardless of the driver being used for that build. This is beneficial for
# simpler deployments where you want a single worker deployed for executing
# builds with multiple drivers. The "builds" queue will be used for executing
# the build when this option is set.
share_queue true

net {
	# The address to serve on.
	listen ":443"

	# Serve over TLS.
	ssl {
		cert "/var/lib/ssl/server.crt"
		key  "/var/lib/ssl/server.key"
	}
}

# Configuration settings for the cryptography used throughout the Djinn CI
# server for encrypting data, generating hard to guess secrets, and
# protecting against CSRF attacks.
crypto {
	# The hash key is used to authenticate values using HMAC. This must be
	# either 32, or 64 characters in length.
	hash "1a2b3c4d5e6f7g8h1a2b3c4d5e6f7g8h"

	# The block key is required for encrypting data. This must be either, 16,
	# 24, or 32 characters in length.
	block "1a2b3c4d5e6f7g8h"

	# Salt is used for generating hard to guess secrets, and for generating the
	# final key that is used for encrypting data.
	salt "1a2b3c4d5e6f7g8h"

	# The key to use to protect against CSRF attacks. This must be 32
	# characters in length.
	auth "1a2b3c4d5e6f7g8h1a2b3c4d5e6f7g8h"
}

# Connection information for the PostgreSQL database.
database {
	addr "localhost:5432"
	name "djinn"

	username "djinn-server"
	password "secret"

	# Optional configuration block if you want to connect via SSL to the
	# PostgreSQL database. Setting the below would be the equivalent of
	# putting sslmode=verify-full in the connection string to PostgresSQL.
#	ssl {
#		ca   "/var/lib/ssl/ca.crt"
#		cert "/var/lib/ssl/pgclient.crt"
#		key  "/var/lib/ssl/pgclient.key"
#	}
}

# Connection information for the Redis database.
redis {
	addr "localhost:6379"

	# Optional password parameter if Redis is password protected.
#	password "secret"
}

# Connection information for the SMTP server to use for delivering mail.
smtp {
	addr "smtp.example.com:587"

	# If connecting via TLS, then the path to the file that contains a set of
	# root certificate authorities.
	ca "/etc/ssl/cert.pem"

	# The email address to be used in the From field of mails that are sent.
	# Typically this is set to noreply@<host>.
	admin "noreply@djinn-ci.com"

	# The username and password to use if authentication is required when
	# connecting to the SMTP server.
	username "postmaster@example.com"
	password "secret"
}

# Store blocks configure the block storage we want to use for storing and
# accessing files in the Djinn CI server. These blocks follow the format
# of,
#
#     store <name> {
#         ...
#     }
#
# where <kind> is the kind of storage to use, for example "file" for storing
# on the filesystem directly. <name> would be one of the following,
#
# * images    - for storing custom driver images uploaded to the server
# * artifacts - where artifacts are stored on the server so they can be
#               downloaded.
# * objects   - for storing the build objects uploaded to the server
store artifacts {
	type "file"
	path "/var/lib/djinn/artifacts"
}

store images {
	type "file"
	path "/var/lib/djinn/images"
}

store objects {
	type  "file"
	path  "/var/lib/djinn/objects"
	limit 5242880 
}

# Provider blocks configure the external 3rd party providers we can connect to.
# These blocks follow the format of,
#
#     provider <name>
#
# where <name> is the name of the provider we want to connect to. <name> would
# be one of the following,
#
# * github
# * gitlab
#
# detailed below are the shared properties for the provider block,
#
# * endpoint      - the custom endpoint to use for the provider. If none is given
#                   then the provider's default endpoint is used
# * secret        - the secret to use to authenticate webhooks that we receive
#                   from the provider
# * client_id     - the client_id given by the provider for handling OAuth
# * client_secret - the client_secret given by the provider for handling OAuth
provider github {
	secret        "123456"
	client_id     "..."
	client_secret "..."
}

provider gitlab {
	secret        "123456"
	client_id     "..."
	client_secret "..."
}
