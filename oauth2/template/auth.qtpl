{%
import (
	"strings"

	"github.com/andrewpillar/djinn/oauth2"
	"github.com/andrewpillar/djinn/template"
	"github.com/andrewpillar/djinn/user"
)
%}


{% code
type Auth struct {
	template.Form

	User        *user.User
	Author      *user.User
	Name        string
	ClientID    string
	RedirectURI string
	State       string
	Scope       oauth2.Scope
}

func renderPermissionList(p oauth2.Permission) string {
	var buf strings.Builder

	exp := p.Expand()
	l := len(exp) - 1

	for i, perm := range exp {
		buf.WriteString(strings.Title(perm.String()))

		if i + 1 == l {
			buf.WriteString(", and")
		}

		if i != l {
			buf.WriteString(", ")
			continue
		}
	}
	return buf.String()
}
%}

{% collapsespace %}
{% func renderScope(res oauth2.Resource, perm oauth2.Permission) %}
	<div class="scope-item">
		{% switch res %}
		{% case oauth2.Build %}
			{% cat "../../static/svg/build.svg" %}
		{% case oauth2.Invite %}
			{% cat "../../static/svg/mail.svg" %}
		{% case oauth2.Image %}
			{% cat "../../static/svg/image.svg" %}
		{% case oauth2.Namespace %}
			{% cat "../../static/svg/folder.svg" %}
		{% case oauth2.Object %}
			{% cat "../../static/svg/upload.svg" %}
		{% case oauth2.Variable %}
			{% cat "../../static/svg/code.svg" %}
		{% case oauth2.Key %}
			{% cat "../../static/svg/key.svg" %}
		{% case oauth2.Cron %}
			{% cat "../../static/svg/timer.svg" %}
		{% endswitch %}
		<span>
			<strong>{%s strings.Title(res.String()) %}</strong>
			{%s renderPermissionList(perm) %}
		</span>
	</div>
{% endfunc %}

{% func (p *Auth) Title() %}
	Authenticate application - Djinn
{% endfunc %}

{% func (p *Auth) Footer() %}
	<style type="text/css">{% cat "../../static/auth.css" %}</style>
{% endfunc %}

{% func (p *Auth) Body() %}
	<div class="auth-page">
		<div class="auth-form">
			<div class="auth-header">
				<div class="brand">
					<div class="left"></div>
					<div class="right"></div>
				</div>
				<h1>Authorize {%s p.Name %}</h1>
			</div>
			<form method="POST" action="/login/oauth/authorize">
				{%s= p.CSRF %}
				<input type="hidden" name="client_id" value="{%s p.ClientID %}"/>
				<input type="hidden" name="redirect_uri" value="{%s p.RedirectURI %}"/>
				<input type="hidden" name="scope" value="{%s p.Scope.String() %}"/>
				<input type="hidden" name="state" value="{%s p.State %}"/>
				<div class="scope-list">
					<h3>Requested Scopes</h3>
					<div><strong>{%s p.Name %}</strong> from <strong>{%s p.Author.Username %}</strong> would like access to the following,</div>
					{% for _, sc := range p.Scope %}
						{%= renderScope(sc.Resource, sc.Permission) %}
					{% endfor %}
				</div>
				{% if p.User == nil %}
					<input type="hidden" name="authorize" value="true"/>
					<div class="input-field">
						<label>Email / Username</label>
						<input class="text" type="text" name="handle" value="{%s p.Fields["handle"] %}" autocomplete="off"/>
						{%= p.Error("handle") %}
					</div>
					<div class="input-field">
						<label>Password</label>
						<input class="text" type="password" name="password" autocomplete="off"/>
						{%= p.Error("password") %}			
					</div>
				{% endif %}
				<div class="input-field">
					<button type="submit" class="btn btn-primary">Authorize</button>
				</div>
			</form>
		</div>
	</div>
{% endfunc %}
{% endcollapsespace %}
