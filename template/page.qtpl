{%
import (
	"html/template"
	"strings"
	"regexp"

	"github.com/andrewpillar/thrall/form"
)
%}

{%
interface page {
	Title()

	Styles()

	Body()

	Footer()
}
%}

{% code
type Page struct {
	URI string
}

type Form struct {
	CSRF   template.HTML
	Errors form.Errors
	Form   form.Form
}

func (f Form) Get(field string) string {
	return f.Form.Get(field)
}
%}

{% collapsespace %}
{% func Render(p page) %}
	<!DOCTYPE HTML>
	<html lang="en">
		<head>
			<meta charset="utf-8">
			<meta content="width=device-width, initial-scale=1" name="viewport">
			<title>{%= p.Title() %}</title>
			{%= p.Styles() %}
		</head>
		<body>{%= p.Body() %}</body>
		<footer>{%= p.Footer() %}</footer>
	</html>
{% endfunc %}

{% stripspace %}
{% func RenderLink(href, uri string, classes ...string) %}
	<a href="{%s href %}" class="{% if href == uri %}active{% endif %} {%s strings.Join(classes, " ") %}">
{% endfunc %}

{% func RenderLinkPattern(href, pattern, uri string, classes ...string) %}
	<a href="{%s href %}" class="{% if matched, _ := regexp.Match(pattern, []byte(uri)); matched %}active{% endif %}">
{% endfunc %}

{% func RenderCode(code string) %}
	{% code
		lines := strings.Split(code, "\n")
	%}
	<div class="code-wrap">
		<table class="code">
			<tbody>
				{% for i, l := range lines %}
					<tr>
						<td class="line-number"><a href="#L{%v i + 1 %}">{%v i + 1 %}</a></td>
						<td id="L{%v i + 1 %}" class="line">{%s l %}</td>
					</tr>
				{% endfor %}
			</tbody>
		</table>
	</div>
{% endfunc %}
{% endstripspace %}

{% func (f Form) Error(field string) %}
	<div class="form-error">{%s f.Errors.First(field) %}</div>
{% endfunc %}

{% func (p *Page) Title() %}
	Thrall
{% endfunc %}

{% func (p *Page) Styles() %}
	<link rel="stylesheet" type="text/css" href="/assets/css/main.css">
{% endfunc %}

{% func (p *Page) Body() %}
{% endfunc %}

{% func (p *Page) Footer() %}
{% endfunc %}
{% endcollapsespace %}
