{%
import (
	"fmt"

	"github.com/andrewpillar/thrall/model"
	"github.com/andrewpillar/thrall/template"
)
%}

{% code
type ShowPage struct {
	template.Page

	Build  *model.Build

	ShowManifest  bool
	ShowObjects   bool
	ShowArtifacts bool
	ShowVariables bool
	ShowOutput    bool
}
%}

{% collapsespace %}
{% func (p *ShowPage) Title() %}
	Build #{%v p.Build.ID %} - Thrall
{% endfunc %}

{% func (p *ShowPage) Body() %}
	{% if p.ShowManifest %}
		{%= p.renderManifest() %}
	{% elseif p.ShowObjects %}
		{%= p.renderObjects() %}
	{% elseif p.ShowArtifacts %}
		{%= p.renderArtifacts() %}
	{% elseif p.ShowVariables %}
		{%= p.renderVariables() %}
	{% elseif p.ShowOutput %}
		{%= p.renderOutput() %}
	{% else %}
		<div class="panel">
			<table class="table">
				<tr>
					<td>Submitted by:</td>
					<td class="align-right">{%s p.Build.User.Username %} &lt;{%s p.Build.User.Email %}&gt;</td>
				</tr>
				<tr>
					<td>Started at:</td>
					<td class="align-right">
						{% if p.Build.StartedAt != nil && p.Build.StartedAt.Valid %}
						{% else %}
							--
						{% endif %}
					</td>
				</tr>
				<tr>
					<td>Finished at:</td>
					<td class="align-right">
						{% if p.Build.FinishedAt != nil && p.Build.FinishedAt.Valid %}
						{% else %}
							--
						{% endif %}
					</td>
				</tr>
			</table>
		</div>
		{% for _, s := range p.Build.Stages %}
			<div class="panel">
				<div class="panel-header">
					<h3>{%s s.Name %}</h3>
				</div>
				<table class="table">
					<thead>
						<tr>
							<th class="cell-pill">STATUS</th>
							<th>JOB</th>
							<th class="cell-date">STARTED</th>
							<th class="cell-date">FINISHED</th>
						</tr>
					</thead>
					<tbody>
						{% for _, j := range s.Jobs %}
							<tr>
								<td class="cell-pill">{%= RenderStatus(j.Status) %}</td>
								<td><a href="{%s j.UIEndpoint() %}">{%s j.Name %}</a></td>
								<td class="cell-date"><span class="muted">--</span></td>
								<td class="cell-date"><span class="muted">--</span></td>
							</tr>
						{% endfor %}
					</tbody>
				</table>
			</div>
		{% endfor %}
	{% endif %}
{% endfunc %}

{% func (p *ShowPage) Header() %}
	<a href="/" class="back">{% cat "../../svgs/back.svg" %}</a> Build #{%v p.Build.ID %} {%= RenderStatus(p.Build.Status) %}
{% endfunc %}

{% func (p *ShowPage) Actions() %}{% endfunc %}

{% func (p *ShowPage) Navigation() %}
	{% stripspace %}
		<li>{%= template.RenderLink(p.Build.UIEndpoint(), p.URI) %}{% cat "../../svgs/eye.svg" %}<span>Overview</span></a></li>
		<li>{%= template.RenderLink(p.Build.UIEndpoint("manifest"), p.URI) %}{% cat "../../svgs/list.svg" %}<span>Manifest</span></a></li>
		<li>{%= template.RenderLink(p.Build.UIEndpoint("objects"), p.URI) %}{% cat "../../svgs/upload.svg" %}<span>Objects</span></a></li>
		<li>{%= template.RenderLink(p.Build.UIEndpoint("artifacts"), p.URI) %}{% cat "../../svgs/download.svg" %}<span>Artifacts</span></a></li>
		<li>{%= template.RenderLink(p.Build.UIEndpoint("variables"), p.URI) %}{% cat "../../svgs/code.svg" %}<span>Variables</span></a></li>
		<li>{%= template.RenderLink(p.Build.UIEndpoint("output"), p.URI) %}{% cat "../../svgs/document.svg" %}<span>Output</span></a></li>
	{% endstripspace %}
{% endfunc %}

{% func (p *ShowPage) renderManifest() %}
	<div class="panel">
		<div class="panel-header">
			<ul class="panel-actions">
				<li><a class="btn btn-primary" href="{%s p.Build.UIEndpoint("manifest", "raw") %}">{% cat "../../svgs/document.svg" %}<span>Raw</span></a></li>
			</ul>
		</div>
		{%= template.RenderCode(p.Build.Manifest) %}
	</div>
{% endfunc %}

{% func (p *ShowPage) renderObjects() %}
	<div class="panel">
		{% if len(p.Build.Objects) > 0 %}
			<table class="table">
				<thead>
					<tr>
						<th>SOURCE</th>
						<th>NAME</th>
						<th>HASHES</th>
						<th></th>
					</tr>
				</thead>
				<tbody>
					{% for _, o := range p.Build.Objects %}
						<tr>
							<td>
								{% if o.Object != nil %}
									<a href="/objects/{%v o.Object.ID %}">{%s o.Source %}</a>
								{% else %}
									<a title="Object not found"><strike>{%s o.Source %}</strike></a>
								{% endif %}
							</td>
							<td><code>{%s o.Name %}</code></td>
							<td>
								<div class="mb-10">MD5 <code class="right">{% if o.Object != nil %}{%s fmt.Sprintf("%x", o.Object.MD5) %}{% else %}--{% endif %}</code></div>
								<div>SHA256 <code class="right">{% if o.Object != nil %}{%s fmt.Sprintf("%x", o.Object.SHA256) %}{% else %}--{% endif %}</code></div>
							</td>
							<td class="align-right">
								{% if o.Placed %}
									<span class="pill pill-green">{% cat "../../svgs/check.svg" %} Placed</span>
								{% else %}
									<span class="pill pill-red">{% cat "../../svgs/close.svg" %} Not Placed</span>
								{% endif %}
							</td>
						</tr>
					{% endfor %}
				</tbody>
			</table>
		{% else %}
			<div class="panel-message muted">No objects have been placed for this build.</div>
		{% endif %}
	</div>
{% endfunc %}

{% func (p *ShowPage) renderArtifacts() %}
	<div class="panel">
		{% if len(p.Build.Artifacts) > 0 %}
		{% else %}
			<div class="panel-message muted">No artifacts have been collected from this build.</div>
		{% endif %}
	</div>
{% endfunc %}

{% func (p *ShowPage) renderVariables() %}
	<div class="panel">
		{% if len(p.Build.Variables) > 0 %}

		{% else %}
			<div class="panel-message muted">No variables have been set for this build.</div>
		{% endif %}
	</div>
{% endfunc %}

{% func (p *ShowPage) renderOutput() %}
	<div class="panel">
		{% if p.Build.Output.Valid %}
			<div class="panel-header">
				<ul class="panel-actions">
					<li><a class="btn btn-primary" href="{%s p.Build.UIEndpoint("output", "raw") %}">{% cat "../../svgs/document.svg" %}<span>Raw</span></a></li>
				</ul>
			</div>
			{%= template.RenderCode(p.Build.Output.String) %}
		{% else %}
			<div class="panel-message muted">No build output has been produced.</div>
		{% endif %}
	</div>
{% endfunc %}
{% endcollapsespace %}
