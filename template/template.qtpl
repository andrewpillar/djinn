{%
import (
	"net/url"
	"regexp"

	"github.com/andrewpillar/thrall/form"
	"github.com/andrewpillar/thrall/model"
	"github.com/andrewpillar/thrall/user"
)
%}

{%
interface Page {
	Title()

	Body()

	Footer()
}
%}

{%
interface Section {
	Title()

	Section()
}
%}

{% code
type BasePage struct {
	URL  *url.URL
	User *user.User
}

type Form struct {
	CSRF   string
	Errors form.Errors
	Fields map[string]string
}

func pattern(name string) string { return "(^\\/" + name + "\\/?[a-z0-9\\/?]*$)" }

func Active(condition bool) string {
	if condition {
		return "active"
	}
	return ""
}

func Match(uri, pattern string) bool {
	matched, err := regexp.Match(pattern, []byte(uri))

	if err != nil {
		return false
	}
	return matched
}
%}

{% collapsespace %}
{% func Render(p Page) %}
	<!DOCTYPE HTML>
	<html lang="en">
		<head>
			<meta charset="utf-8">
			<meta content="width=device-width, initial-scal=1" name="viewport">
			<title>{%= p.Title() %}</title>
		</head>
		<body>{%= p.Body() %}</body>
		<footer>{%= p.Footer() %}</footer>
	</html>
{% endfunc %}

{% stripspace %}
{% func RenderPaginator(uri string, p model.Paginator) %}
	{% if len(p.Pages) > 1 %}
		<ul class="paginator panel">
			{% if p.Page == p.Prev %}
				<li><a class="disabled">Previous</a></li>
			{% else %}
				<li><a href="{%s uri %}?page={%v p.Prev %}" class="prev">Previous</a></li>
			{% endif %}
			{% if p.Page == p.Next %}
				<li><a class="disabled">Next</a></li>
			{% else %}
				<li><a href="{%s uri %}?page={%v p.Next %}" class="next">Next</a></li>
			{% endif %}
		</ul>
	{% endif %}
{% endfunc %}
{% endstripspace %}

{% func (f Form) Error(field string) %} <div class="form-error">{%s f.Errors.First(field) %}</div> {% endfunc %}
{% func (p *BasePage) Title() %} Thrall {% endfunc %}
{% func (p *BasePage) Body() %}{% endfunc %}
{% func (p *BasePage) Footer() %} <style type="text/css">{% cat "../static/main.css" %}</style> {% endfunc %}
{% endcollapsespace %}
