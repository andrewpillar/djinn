{%
import (
	"fmt"
	"net/url"

	"djinn-ci.com/build"
	"djinn-ci.com/template"
)
%}

{% collapsespace %}
{% func RenderStatusNav(url *url.URL, q url.Values) %}
	{% stripspace %}
		<ul class="panel-nav">
			<li>
				<a href="{%s template.LinkToQuery(url, map[string]string{"status": "", "tag": q.Get("tag")}) %}" {% if !q.Has("status") %}class="active"{% endif %}>
					{% cat "../../static/svg/build.svg" %}<span>All</span>
				</a>
			</li>
			<li>
				<a href="{%s template.LinkToQuery(url, map[string]string{"status": "queued", "tag": q.Get("tag")}) %}" {% if q.Get("status") == "queued" %}class="active"{% endif %}>
					{% cat "../../static/svg/hourglass.svg" %}<span>Queued</span>
				</a>
			</li>
			<li>
				<a href="{%s template.LinkToQuery(url, map[string]string{"status": "running", "tag": q.Get("tag")}) %}" {% if q.Get("status") == "running" %}class="active"{% endif %}>
					{% cat "../../static/svg/timer.svg" %}<span>Running</span>
				</a>
			</li>
			<li>
				<a href="{%s template.LinkToQuery(url, map[string]string{"status": "passed", "tag": q.Get("tag")}) %}" {% if q.Get("status") == "passed" %}class="active"{% endif %}>
					{% cat "../../static/svg/check.svg" %}<span>Passed</span>
				</a>
			</li>
			<li>
				<a href="{%s template.LinkToQuery(url, map[string]string{"status": "failed", "tag": q.Get("tag")}) %}" {% if q.Get("status") == "failed" %}class="active"{% endif %}>
					{% cat "../../static/svg/close.svg" %}<span>Failed</span>
				</a>
			</li>
			<li>
				<a href="{%s template.LinkToQuery(url, map[string]string{"status": "killed", "tag": q.Get("tag")}) %}" {% if q.Get("status") == "killed" %}class="active"{% endif %}>
					{% cat "../../static/svg/stop.svg" %}<span>Killed</span>
				</a>
			</li>
			<li>
				<a href="{%s template.LinkToQuery(url, map[string]string{"status": "timed_out", "tag": q.Get("tag")}) %}" {% if q.Get("status") == "timed_out" %}class="active"{% endif %}>
					{% cat "../../static/svg/stopwatch.svg" %}<span>Timed Out</span>
				</a>
			</li>
		</ul>
	{% endstripspace %}
{% endfunc %}

{% func RenderArtifactTable(aa []*build.Artifact, uri, search string, showSearch bool) %}
	{% if len(aa) == 0 && search == "" %}
		<div class="panel-message muted">No artifacts have been collected from this build.</div> 
	{% else %}
		{% if showSearch %}
			<div class="panel-header">{%= template.RenderSearch(uri, search, "Find an artifact...") %}</div>
		{% endif %}
		{% if len(aa) == 0 && search != "" %}
			<div class="panel-message muted">No results found.</div>
		{% else %}
			<table class="table">
				<thead>
					<tr>
						<th>NAME</th>
						<th>SIZE</th>
						<th>HASHES</th>
					</tr>
				</thead>
				<tbody>
					{% for _, a := range aa %}
						<tr>
							{% if a.DeletedAt.Valid || a.MD5 == nil && a.SHA256 == nil %}
								<td><a title="Artifact deleted"><strike>{%s a.Name %}</strike></a></td>
							{% else %}
								<td><a href="{%s a.Endpoint() %}">{%s a.Name %}</a></td>
							{% endif %}
							<td>{%s template.RenderSize(a.Size.Int64) %}</td>
							<td>
								<div>
									<strong>MD5</strong>
									<span class="code">
										{% if len(a.MD5) == 0 %}
											--
										{% else %}
											{%s fmt.Sprintf("%x", a.MD5) %}
										{% endif %}
									</span>
								</div>
								<div>
									<strong>SHA256</strong>
									<span class="code">
										{% if len(a.SHA256) == 0 %}
											--
										{% else %}
											{%s fmt.Sprintf("%x", a.SHA256) %}
										{% endif %}
									</span>
								</div>
							</td>
						</tr>
					{% endfor %}
				</tbody>
			</table>
		{% endif %}
	{% endif %}
{% endfunc %}
{% endcollapsespace %}
