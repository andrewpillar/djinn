{%
import (
	"bytes"
	"encoding/json"
	"fmt"
	"html/template"
	"net/http"
	"net/url"
	"strings"

	"djinn-ci.com/auth"
	"djinn-ci.com/errors"
	"djinn-ci.com/runner"

	"github.com/gorilla/csrf"
)
%}

{%
interface Template {
	Title()

	Body()

	Footer()
}
%}

{% code
type Page struct {
	User *auth.User
	CSRF template.HTML
	URL  *url.URL
}

func NewPage(u *auth.User, r *http.Request) *Page {
	return &Page{
		User: u,
		CSRF: csrf.TemplateField(r),
		URL:  r.URL,
	}
}

func (p *Page) Href(vals url.Values) string {
	q := p.URL.Query()

	for k := range vals {
		v := vals.Get(k)

		if v == "" {
			delete(q, k)
			continue
		}
		q.Set(k, v)
	}

	url := (*p.URL)
	url.RawQuery = q.Encode()

	return url.String()
}

func HumanSize(n int64) string {
	units := []string{"B", "KB", "MB", "GB", "TB", "PB"}
	i := 0

	for ; n >= 1024; i++ {
		n /= 1024
	}
	return fmt.Sprintf("%d %s", n, units[i])
}

func JSON(s string) string {
	var buf bytes.Buffer
	json.Indent(&buf, []byte(s), "", "    ")
	return buf.String()
}

type Error struct {
	Code    int
	Message string
	Error   error
}

type FatalError struct {
	Error

	Stack string
}
%}

{% collapsespace %}
{% func Code(code string) %}
	<div class="code-wrap">
		<table class="code">
			<tbody>
				{% for i, line := range strings.Split(code, "\n") %}
					<tr>
						<td class="line-number"><a href="#L{%v i + 1 %}">{%v i + 1 %}</a></td>
						<td class="line" id="L{%v i + 1 %}">{%s line %}</td>
					</tr>
				{% endfor %}
			</tbody>
		</table>
	</div>
{% endfunc %}

{% func Status(s runner.Status) %}
	{% switch s %}
		{% case runner.Queued %}
			<span class="pill w-90 pill-dark">{% cat "static/svg/hourglass.svg" %} <span>Queued</span></span>
		{% case runner.Running %}
			<span class="pill w-90 pill-blue">{% cat "static/svg/timer.svg" %} <span>Running</span></span>
		{% case runner.Passed %}
			<span class="pill w-90 pill-green">{% cat "static/svg/check.svg" %} <span>Passed</span></span>
		{% case runner.PassedWithFailures %}
			<span class="pill w-90 pill-orange">{% cat "static/svg/warning.svg" %} <span>Passed</span></span>
		{% case runner.Failed %}
			<span class="pill w-90 pill-red">{% cat "static/svg/close.svg" %} <span>Failed</span></span>
		{% case runner.Killed %}
			<span class="pill w-90 pill-red">{% cat "static/svg/stop.svg" %} <span>Killed</span></span>
		{% case runner.TimedOut %}
			<span class="pill w-90 pill-gray">{% cat "static/svg/stopwatch.svg" %} <span>Timed Out</span></span>
	{% endswitch %}
{% endfunc %}

{% func IconStatus(s runner.Status) %}
	{% switch s %}
		{% case runner.Queued %}
			<span class="pill w-90 pill-dark">{% cat "static/svg/hourglass.svg" %}</span>
		{% case runner.Running %}
			<span class="pill w-90 pill-blue">{% cat "static/svg/timer.svg" %}</span>
		{% case runner.Passed %}
			<span class="pill w-90 pill-green">{% cat "static/svg/check.svg" %}</span>
		{% case runner.PassedWithFailures %}
			<span class="pill w-90 pill-orange">{% cat "static/svg/warning.svg" %}</span>
		{% case runner.Failed %}
			<span class="pill w-90 pill-red">{% cat "static/svg/close.svg" %}</span>
		{% case runner.Killed %}
			<span class="pill w-90 pill-red">{% cat "static/svg/stop.svg" %}</span>
		{% case runner.TimedOut %}
			<span class="pill w-90 pill-gray">{% cat "static/svg/stopwatch.svg" %}</span>
	{% endswitch %}
{% endfunc %}

{% func Logo() %}
	<div class="logo">
		<div class="handle"></div>
		<div class="lid"></div>
		<div class="lantern"></div>
	</div>
{% endfunc %}

{% func Render(tmpl Template) %}
	<!DOCTYPE HTML>
	<html lang="en">
		<head>
			<meta charset="utf-8">
			<meta content="width=device-width, initial-scale=1" name="viewport">
			<title>{%= tmpl.Title() %} - Djinn CI</title>
			<style type="text/css">{% cat "static/main.css" %}</style>
		</head>
		<body>{%= tmpl.Body() %}</body>
		<footer>{%= tmpl.Footer() %}</footer>
	</html>
{% endfunc %}

{% func (p Error) Title() %}Error{% endfunc %}

{% func (p Error) Body() %}
	<div class="error">
		{%= Logo() %}
		<h1>{%v p.Code %}</h1>
		<h2>{%s p.Message %}</h2>
		<br/>
		<a href="/">Back</a>
		<br/><br/>
		{% if p.Error != nil %}
			<textarea readonly>{%s errors.Format(p.Error) %}</textarea>
		{% endif %}
	</div>
{% endfunc %}

{% func (p Error) Footer() %}
	<style type="text/css">{% cat "static/error.css" %}</style>
{% endfunc %}

{% func (p FatalError) Body() %}
	<div class="error">
		{%= Logo() %}
		<h1>{%v p.Code %}</h1>
		<h2>{%s p.Message %}</h2>
		<br/>
		<a href="/">Back</a>
		<br/><br/>
		<textarea readonly>{%s p.Stack %}</textarea>
	</div>
{% endfunc %}
{% endcollapsespace %}
