{%
import (
	"djinn-ci.com/template"
	"djinn-ci.com/variable"
)
%}

{% code 
type Create struct {
	template.BasePage
	template.Form

	Key   string
	Value string
}
%}

{% collapsespace %}
{% func (p *Create) Title() %}
	Create Variable - Djinn CI
{% endfunc %}

{% func (p *Create) Body() %}
	<div class="panel">
		<form class="panel-body slim" method="POST" action="/variables">
			{%s= string(p.CSRF) %}
			<div class="form-field">
				<label class="label" for="namespace">Namespace <small>(optional)</small></label>
				<input class="form-text" type="text" id="namespace" name="namespace" value="{%s p.Fields["namespace"] %}" autocomplete="off"/>
				{%= p.Error("namespace") %}
			</div>
			<div class="form-field">
				<label class="label" for="key">Key</label>
				<input class="form-text" type="text" id="key" name="key" value="{%s p.Fields["key"] %}" autocomplete="off"/>
				{%= p.Error("key") %}
			</div>
			<div class="form-field">
				<label class="label" for="value">Value</label>
				<input class="form-text" type="text" id="value" name="value" value="{%s p.Fields["value"] %}" autocomplete="off"/>
				{%= p.Error("value") %}
			</div>
			<div class="form-field">
				<label class="form-option">
					{% if s, ok := p.Fields["mask"]; ok %}
						<input class="form-selector" type="checkbox" name="mask" checked="{%s s %}"/>
					{% else %}
						<input class="form-selector" type="checkbox" name="mask"/>
					{% endif %}
					<strong>Mask variable</strong>
					<div class="form-desc">Mask the variable value and replace it with <span class="code">{%s variable.MaskString %}</span> in the build logs</div>
				</label>
			</div>
			<div class="form-field">
				<button type="submit" class="btn btn-primary">Create</button>
			</div>
		</form>
	</div>
{% endfunc %}

{% func (p *Create) Header() %}
	<a class="back" href="/variables">{% cat "../../static/svg/back.svg" %}</a> Create Variable
{% endfunc %}

{% func (p *Create) Actions() %}{% endfunc %}
{% func (p *Create) Navigation() %}{% endfunc %}
{% endcollapsespace %}
