{%
import (
	htmltemplate "html/template"

	"github.com/andrewpillar/thrall/model"
	"github.com/andrewpillar/thrall/template"
	"github.com/andrewpillar/thrall/template/job"
)
%}

{% code
type ShowPage struct {
	template.Page

	CSRF         htmltemplate.HTML
	Build        *model.Build
	ShowManifest bool
	ShowOutput   bool
}
%}

{% collapsespace %}
{% func (p *ShowPage) Title() %}
	Build #{%v p.Build.ID %} - Thrall
{% endfunc %}

{% func (p *ShowPage) Body() %}
	{% if p.ShowManifest %}
		<div class="panel">
			<div class="panel-header">
				<ul class="panel-actions">
					<li>
						<a class="btn btn-primary" href="{%s p.Build.UIEndpoint("manifest", "raw") %}">
							{% cat "../../svgs/document.svg" %}<span>Raw</span>
						</a>
					</li>
				</ul>
			</div>
			{%= template.RenderCode(p.Build.Manifest) %}
		</div>
	{% elseif p.ShowOutput %}
		<div class="panel">
			{% if p.Build.Output.Valid %}
				<div class="panel-header">
					<ul class="panel-actions">
						<li>
							<a class="btn btn-primary" href="{%s p.Build.UIEndpoint("output", "raw") %}">
								{% cat "../../svgs/document.svg" %}<span>Raw</span>
							</a>
						</li>
					</ul>
				</div>
				{%= template.RenderCode(p.Build.Output.String) %}
			{% else %}
				<div class="panel-message muted">No build output has been produced.</div>
			{% endif %}
		</div>
	{% else %}
		<div class="mb-10 overflow">
			<div class="col-75 pr-5 left">
				<div class="panel">
					<div class="panel-header">
						{% if p.Build.Namespace.IsZero() %}
							<h3>Submitted by {%s p.Build.User.Username %} &lt;{%s p.Build.User.Email %}&gt;</h3>
						{% else %}
							<h3>Submitted by {%s p.Build.User.Username %} &lt;{%s p.Build.User.Email %}&gt; to <a href="{%s p.Build.Namespace.UIEndpoint() %}">{%s p.Build.Namespace.Path %}</a></h3>
						{% endif %}
					</div>
					<div class="panel-body">
						{% if p.Build.Trigger.Comment != "" %}
							<pre class="code">{%s p.Build.Trigger.Comment %}</pre>
						{% else %}
							<em class="muted">No build comment.</em>
						{% endif %}
					</div>
					<div class="panel-footer">
						<div class="mb-10">
						{% if len(p.Build.Tags) > 0 %}
							{% for _, t := range p.Build.Tags %}
								<a href="/?tag={%s t.Name %}" class="pill pill-light">{%s t.Name %}</a>
							{% endfor %}
						{% else %}
							<em class="muted">No build tags.</em>
						{% endif %}
						</div>
						<form method="POST" action="{%s p.Build.UIEndpoint("tags") %}">
							<div class="form-field">
								{%s= string(p.CSRF) %}
								<input type="text" class="form-text" name="tags" placeholder="Tag this build..." autocomplete="off"/>
							</div>
						</form>
					</div>
				</div>
			</div>
			<div class="col-25 pl-5 right">
				<div class="panel">
					<table class="table">
						<tr>
							<td>Started at:</td>
							<td class="align-right">
								{% if p.Build.StartedAt.Valid %}
									{%s p.Build.StartedAt.Time.Format("2006-01-02T15:04:05") %}
								{% else %}
									<span class="muted">--</span>
								{% endif %}
							</td>
						</tr>
						<tr>
							<td>Finished at:</td>
							<td class="align-right">
								{% if p.Build.FinishedAt.Valid %}
									{%s p.Build.FinishedAt.Time.Format("2006-01-02T15:04:05") %}
								{% else %}
									<span class="muted">--</span>
								{% endif %}
							</td>
						</tr>
						<tr>
							<td>Duration:</td>
							<td class="align-right">
								{% if !p.Build.FinishedAt.Valid || !p.Build.StartedAt.Valid %}
									<span class="muted">--</span>
								{% else %}
									{%v p.Build.FinishedAt.Time.Sub(p.Build.StartedAt.Time) %}
								{% endif %}
							</td>
						</tr>
					</table>
				</div>
			</div>
		</div>
		{% for _, s := range p.Build.Stages %}
			{% if len(s.Jobs) > 0 %}
				<div class="panel">
					<div class="panel-header"><h3>{%s s.Name %}</h3></div>
					{%= job.RenderTable(s.Jobs) %}
				</div>
			{% endif %}
		{% endfor %}
	{% endif %}
{% endfunc %}

{% func (p *ShowPage) Header() %}
	<a href="/" class="back">{% cat "../../svgs/back.svg" %}</a> Build #{%v p.Build.ID %} {%= template.RenderStatus(p.Build.Status) %}
{% endfunc %}

{% func (p *ShowPage) Actions() %}{% endfunc %}

{% func (p *ShowPage) Navigation() %}
	{% stripspace %}
		<li>{%= template.RenderLink(p.Build.UIEndpoint(), p.URI) %}{% cat "../../svgs/eye.svg" %}<span>Overview</span></a></li>
		<li>{%= template.RenderLink(p.Build.UIEndpoint("manifest"), p.URI) %}{% cat "../../svgs/list.svg" %}<span>Manifest</span></a></li>
		<li>{%= template.RenderLink(p.Build.UIEndpoint("objects"), p.URI) %}{% cat "../../svgs/upload.svg" %}<span>Objects</span></a></li>
		<li>{%= template.RenderLink(p.Build.UIEndpoint("artifacts"), p.URI) %}{% cat "../../svgs/download.svg" %}<span>Artifacts</span></a></li>
		<li>{%= template.RenderLink(p.Build.UIEndpoint("variables"), p.URI) %}{% cat "../../svgs/code.svg" %}<span>Variables</span></a></li>
		<li>{%= template.RenderLink(p.Build.UIEndpoint("output"), p.URI) %}{% cat "../../svgs/document.svg" %}<span>Output</span></a></li>
		<li>{%= template.RenderLink(p.Build.UIEndpoint("tags"), p.URI) %}{% cat "../../svgs/tag.svg" %}<span>Tag</span></a></li>
	{% endstripspace %}
{% endfunc %}
{% endcollapsespace %}
